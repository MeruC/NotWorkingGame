[gd_resource type="ShaderMaterial" load_steps=6 format=2]

[ext_resource path="res://resources/Models/Player/1.png" type="Texture" id=1]
[ext_resource path="res://resources/Models/Player/1shade.png" type="Texture" id=2]

[sub_resource type="Shader" id=20]
code = "shader_type spatial;
render_mode cull_front, unshaded, ambient_light_disabled;

uniform float outline_thickness : hint_range(0.0, 1.0, 0.001) = 0.005;
uniform vec4 outline_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);

void vertex()
{
	VERTEX = (NORMAL * outline_thickness) + VERTEX;
}

void fragment()
{
	ALBEDO = outline_color.rgb;
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 20 )
shader_param/outline_thickness = 0.005
shader_param/outline_color = Color( 0, 0, 0, 1 )

[sub_resource type="Shader" id=19]
code = "//By David Lipps aka DaveTheDev @ EXPWorlds
//v2.0.0 for Godot 3.2

shader_type spatial;
render_mode ambient_light_disabled;

uniform bool use_shade = true;
uniform bool use_specular = false;
uniform bool use_rim = false;
uniform bool use_light = false;
uniform bool use_shadow = false;

uniform vec4 base_color : hint_color = vec4(1.0);
uniform vec4 shade_color : hint_color = vec4(1.0);
uniform vec4 specular_tint : hint_color = vec4(0.75);
uniform vec4 rim_tint : hint_color = vec4(0.75);

uniform float shade_threshold : hint_range(-1.0, 1.0, 0.001) = 0.0;
uniform float shade_softness : hint_range(0.0, 1.0, 0.001) = 0.01;

uniform float specular_glossiness : hint_range(1.0, 100.0, 0.1) = 15.0;
uniform float specular_threshold : hint_range(0.01, 1.0, 0.001) = 0.5;
uniform float specular_softness : hint_range(0.0, 1.0, 0.001) = 0.1;

uniform float rim_threshold : hint_range(0.00, 1.0, 0.001) = 0.25;
uniform float rim_softness : hint_range(0.0, 1.0, 0.001) = 0.05;
uniform float rim_spread : hint_range(0.0, 1.0, 0.001) = 0.5;

uniform float shadow_threshold : hint_range(0.00, 1.0, 0.001) = 0.7;
uniform float shadow_softness : hint_range(0.0, 1.0, 0.001) = 0.1;

uniform sampler2D base_texture: hint_albedo;
uniform sampler2D shade_texture: hint_albedo;

void light()
{
	float NdotL = dot(NORMAL, LIGHT);
	float is_lit = step(shade_threshold, NdotL);
	vec4 base = texture(base_texture, UV).rgba * base_color.rgba;
	vec4 shade = texture(shade_texture, UV).rgba * shade_color.rgba;
	vec4 diffuse = base;
	

	if (use_shade)
	{
		float shade_value = smoothstep(shade_threshold - shade_softness ,shade_threshold + shade_softness, NdotL);
		diffuse = mix(shade, base, shade_value);
		
		if (use_shadow)
		{
			float shadow_value = smoothstep(shadow_threshold - shadow_softness ,shadow_threshold + shadow_softness, ATTENUATION.r);
			shade_value = min(shade_value, shadow_value);
			diffuse = mix(shade, base, shade_value);
			is_lit = step(shadow_threshold, shade_value);
		}
	}
	
	if (use_specular)
	{
		vec3 half = normalize(VIEW + LIGHT);
		float NdotH = dot(NORMAL, half);
		
		float specular_value = pow(NdotH * is_lit, specular_glossiness * specular_glossiness);
		specular_value = smoothstep(specular_threshold - specular_softness, specular_threshold + specular_softness, specular_value);
		diffuse += specular_tint.rgba * specular_value;
	}
	
	if (use_rim)
	{
		float iVdotN = 1.0 - dot(VIEW, NORMAL);
		float inverted_rim_threshold = 1.0 - rim_threshold;
		float inverted_rim_spread = 1.0 - rim_spread;
		
		float rim_value = iVdotN * pow(NdotL, inverted_rim_spread);
		rim_value = smoothstep(inverted_rim_threshold - rim_softness, inverted_rim_threshold + rim_softness, rim_value);
		diffuse += rim_tint.rgba * rim_value * is_lit;
	}
	
	if (use_light)
	{
		diffuse *= vec4(LIGHT_COLOR, 1.0);
	}
	
	DIFFUSE_LIGHT = diffuse.rgb;
	ALPHA = diffuse.a;
}"

[resource]
next_pass = SubResource( 18 )
shader = SubResource( 19 )
shader_param/use_shade = true
shader_param/use_specular = false
shader_param/use_rim = false
shader_param/use_light = false
shader_param/use_shadow = true
shader_param/base_color = Color( 1, 1, 1, 1 )
shader_param/shade_color = Color( 1, 1, 1, 1 )
shader_param/specular_tint = Color( 0.75, 0.75, 0.75, 0.75 )
shader_param/rim_tint = Color( 0.75, 0.75, 0.75, 0.75 )
shader_param/shade_threshold = 0.1
shader_param/shade_softness = 0.01
shader_param/specular_glossiness = 1.0
shader_param/specular_threshold = 0.01
shader_param/specular_softness = 0.0
shader_param/rim_threshold = 0.25
shader_param/rim_softness = 0.05
shader_param/rim_spread = 0.5
shader_param/shadow_threshold = 0.7
shader_param/shadow_softness = 0.1
shader_param/base_texture = ExtResource( 1 )
shader_param/shade_texture = ExtResource( 2 )
